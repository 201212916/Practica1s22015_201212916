package com.Escenarios;
import javax.swing.JOptionPane;

import com.Main.CargaObjetos;
import com.Reportes.*;
import com.Pojos.*;

public class E_EliminarObjeto extends javax.swing.JFrame {

    private CargaObjetos carga;
    private ArchivoListas a;
    private ArchivoRecuperar recuperar;
    
    public E_EliminarObjeto() {
        initComponents();
        carga = new CargaObjetos();
        a = new ArchivoListas();
        recuperar = new ArchivoRecuperar();
        setLocationRelativeTo(null);
    }
    
    public void ejecutar(){
    	jComboBox2.removeAllItems();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel1.setText("Eliminacion de Objeto");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Personaje", "Goomba", "Koopa", "Moneda", "Hongo_Vida", "Suelo", "Pared", "Castillo" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Tipo");

        jLabel3.setText("Nombre");

        jButton1.setText("Eliminar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, 97, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String item = this.jComboBox1.getSelectedItem().toString();
        String item2 = this.jComboBox2.getSelectedItem().toString();
        String objetos[] = item2.split(" ");
        int posicion = Integer.parseInt(objetos[0]);
        String objeto = objetos[1];
        

        switch (item) {
            case "Personaje":
                carga.getRecuperar().agregarNodo(carga.getJugador().getNodo(posicion).getDato());
            	carga.getJugador().remove(posicion);         		
            break;
            case "Goomba":
                carga.getRecuperar().agregarNodo(carga.getGoomba().getNodo(posicion).getDato());
                carga.getGoomba().remove(posicion); 
            break;
            case "Koopa":
                carga.getRecuperar().agregarNodo(carga.getKoopa().getNodo(posicion).getDato());
                carga.getKoopa().remove(posicion); 
            break;
            case "Moneda":
                carga.getRecuperar().agregarNodo(carga.getMoneda().getNodo(posicion).getDato());
                carga.getMoneda().remove(posicion); 
            break;
            case "Hongo_Vida":
                carga.getRecuperar().agregarNodo(carga.getVida().getNodo(posicion).getDato());
                carga.getVida().remove(posicion); 
            break;
            case "Suelo":
                carga.getRecuperar().agregarNodo(carga.getSuelo().getNodo(posicion).getDato());
                carga.getSuelo().remove(posicion); 
            break;
            case "Pared":
                carga.getRecuperar().agregarNodo(carga.getPared().getNodo(posicion).getDato());
                carga.getPared().remove(posicion); 
            break;
            case "Castillo":
                carga.getRecuperar().agregarNodo(carga.getCastillo().getNodo(posicion).getDato());
                carga.getCastillo().remove(posicion); 
            break;
            	
        }
        
        recuperar.generarArchivo();
        a.generarArchivo();
        
        JOptionPane.showMessageDialog(null, "Item Eliminado");        
        this.hide();

    

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String item = this.jComboBox1.getSelectedItem().toString();
        

        switch (item) {
            case "Personaje":
                jComboBox2.removeAllItems();
                if(!carga.getJugador().esVacio()){
	                String jugador[] = carga.getJugador().getNodo(1).getDato().toString().split(":");
	                for(int i = 1; i<=carga.getJugador().getSize(); i++){
	                    jComboBox2.addItem(i + " " + jugador[2]);   
	                }
                }else{
                	JOptionPane.showMessageDialog(null, "No hay items de este objeto");
                }
            break;
            case "Goomba":
            	if(!carga.getGoomba().esVacio()){
                jComboBox2.removeAllItems();
                for(int i = 1; i<=carga.getGoomba().getSize(); i++){
                    jComboBox2.addItem(i + " " + carga.getGoomba().getNodo(i).getDato().toString());   
                }
            	}else{
                	JOptionPane.showMessageDialog(null, "No hay items de este objeto");
                }
            break;
            case "Koopa":
            	if(!carga.getKoopa().esVacio()){
                jComboBox2.removeAllItems();
                for(int i = 1; i<=carga.getKoopa().getSize(); i++){
                    jComboBox2.addItem(i + " " + carga.getKoopa().getNodo(i).getDato().toString());   
                }
            	}else{
                	JOptionPane.showMessageDialog(null, "No hay items de este objeto");
                }
            break;
            case "Moneda":
            	if(!carga.getMoneda().esVacio()){
                jComboBox2.removeAllItems();
                for(int i = 1; i<=carga.getMoneda().getSize(); i++){
                    jComboBox2.addItem(i + " " + carga.getMoneda().getNodo(i).getDato().toString());   
                }
            	}else{
                	JOptionPane.showMessageDialog(null, "No hay items de este objeto");
                }
            break;
            case "Hongo_Vida":
            	if(!carga.getVida().esVacio()){
                jComboBox2.removeAllItems();
                for(int i = 1; i<=carga.getVida().getSize(); i++){
                    jComboBox2.addItem(i + " " + carga.getVida().getNodo(i).getDato().toString());   
                }
            	}else{
                	JOptionPane.showMessageDialog(null, "No hay items de este objeto");
                }
            break;
            case "Suelo":
            	if(!carga.getSuelo().esVacio()){
                jComboBox2.removeAllItems();
                for(int i = 1; i<=carga.getSuelo().getSize(); i++){
                    jComboBox2.addItem(i + " " + carga.getSuelo().getNodo(i).getDato().toString());   
                }
            	}else{
                	JOptionPane.showMessageDialog(null, "No hay items de este objeto");
                }
            break;
            case "Pared":
            	if(!carga.getPared().esVacio()){
                jComboBox2.removeAllItems();
                for(int i = 1; i<=carga.getPared().getSize(); i++){
                    jComboBox2.addItem(i + " " + carga.getPared().getNodo(i).getDato().toString());   
                }
            	}else{
                	JOptionPane.showMessageDialog(null, "No hay items de este objeto");
                }
            break;
            case "Castillo":
            	if(!carga.getCastillo().esVacio()){
                jComboBox2.removeAllItems();
                for(int i = 1; i<=carga.getCastillo().getSize(); i++){
                    jComboBox2.addItem(i + " " + carga.getCastillo().getNodo(i).getDato().toString());   
                }
            	}else{
                	JOptionPane.showMessageDialog(null, "No hay items de este objeto");
                }
            break;
        }

        a.generarArchivo();

     

    }//GEN-LAST:event_jComboBox1ActionPerformed


    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
